 /*
  * @(#)NBScriptingCasePanel.java   
  *
  * Copyright (C) 2006 www.interpss.org
  *
  * This program is free software; you can redistribute it and/or
  * modify it under the terms of the GNU LESSER GENERAL PUBLIC LICENSE
  * as published by the Free Software Foundation; either version 2.1
  * of the License, or (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * @Author Mike Zhou
  * @Version 1.0
  * @Date 07/15/2007
  * 
  *   Revision History
  *   ================
  *
  */

package org.interpss.editor.ui.run;

import java.util.Vector;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JDialog;

import org.interpss.custom.run.ICustomRunScriptPlugin;
import org.interpss.editor.data.proj.CaseData;
import org.interpss.editor.jgraph.ui.edit.IFormDataPanel;
import org.interpss.editor.ui.IOutputTextDialog;
import org.interpss.editor.ui.UISpringAppContext;
import org.interpss.editor.ui.util.CoreScriptUtilFunc;
import org.interpss.editor.ui.util.GUIFileUtil;
import org.interpss.editor.ui.util.ScriptJavacUtilFunc;
import org.interpss.spring.PluginSpringCtx;
import org.interpss.xml.IpssXmlParser;
import org.interpss.xml.schema.AnalysisRunDataType;
import org.interpss.xml.schema.InterPSSXmlType;

import com.interpss.common.util.IpssLogger;
import com.interpss.spring.CoreCommonSpringCtx;

public class NBScriptingCasePanel extends javax.swing.JPanel implements IFormDataPanel {
	private static final long serialVersionUID = 1;

	private CaseData _caseData = null;
    
    /** Creates new form NBCaseInfoDialog */
    public NBScriptingCasePanel(JDialog parent) {
        initComponents();
    }
    
    public void init(Object netContainer, Object appCtx) {
		IpssLogger.getLogger().info("NBScriptingCasePanel init() called");
		customPluginComboBox.setModel(new DefaultComboBoxModel(
				PluginSpringCtx.getCustomScriptRunPluginNameList()));
    }

    public void setCaseData(CaseData data) {
    	_caseData = data;
    }
    
	/**
	*	Set form data to the editor
	*
	* @return false if there is any problem
	*/
	public boolean setForm2Editor() {
		IpssLogger.getLogger().info("NBScriptingCasePanel setForm2Editor() called");
		
    	if (_caseData.getScripts() != null && !_caseData.getScripts().equals("")) {
    		scriptsTextArea.setText(_caseData.getScripts());
    		if (_caseData.getScriptLanguage() == CaseData.ScriptLanguage_Java)
        		javaRadioButton.setSelected(true);
    		else if (_caseData.getScriptLanguage() == CaseData.ScriptLanguage_Plugin) {
    			customRadioButton.setSelected(true);
    	        setCustomPluginStatus(true);
    		}
    		else
        		xmlRadioButton.setSelected(true);
    	}
    	else {
    		// load from the template
    		String filename = CoreScriptUtilFunc.RunScriptsTemplateFilename;
    		GUIFileUtil.readFile2TextareaRativePath(filename, scriptsTextArea);
    		javaRadioButton.setSelected(true);
    	}		
        return true;
	}
    
	/**
	*	Save editor screen data to the form
	*
	* @param errMsg error messages during the saving process.
	* @return false if there is any problem
	*/
	public boolean saveEditor2Form(Vector<String> errMsg) throws Exception {
		IpssLogger.getLogger().info("NBScriptingCasePanel saveEditor2Form() called");
		// compile the code to check for error
		if (javaRadioButton.isSelected()) {
			String code = CoreScriptUtilFunc.parseRunCaseJavaCode(scriptsTextArea.getText(), 
		             ScriptJavacUtilFunc.CheckCodeClassname);
			if (!ScriptJavacUtilFunc.checkJavaCode(code, CoreScriptUtilFunc.RunCaseScriptingPackageName)) {
	        	errMsg.add(new String("Java compile error"));
			}		
			_caseData.setScriptLanguage(CaseData.ScriptLanguage_Java);
		}
		else if (customRadioButton.isSelected()) {
			_caseData.setScriptLanguage(CaseData.ScriptLanguage_Plugin);
			_caseData.setScriptPluginName((String)customPluginComboBox.getSelectedItem());
		}
		else {
			try {
				// check xml error
				new IpssXmlParser(scriptsTextArea.getText());
			} catch (Exception e) {
	        	errMsg.add(new String("Invalid Xml, ") + e.toString());
			}
			_caseData.setScriptLanguage(CaseData.ScriptLanguage_Xml);
		}
		// save the java code
		_caseData.setScripts(scriptsTextArea.getText());
		
		return errMsg.size() == 0;
	}
    

    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        languageButtonGroup = new javax.swing.ButtonGroup();
        textAreaScrollPane = new javax.swing.JScrollPane();
        scriptsTextArea = new javax.swing.JTextArea();
        xmlRadioButton = new javax.swing.JRadioButton();
        javaRadioButton = new javax.swing.JRadioButton();
        customRadioButton = new javax.swing.JRadioButton();
        customPluginComboBox = new javax.swing.JComboBox();
        displayXmlButton = new javax.swing.JButton();

        scriptsTextArea.setColumns(80);
        scriptsTextArea.setFont(new java.awt.Font("Courier New", 0, 12));
        scriptsTextArea.setRows(30);
        scriptsTextArea.setTabSize(3);
        textAreaScrollPane.setViewportView(scriptsTextArea);

        languageButtonGroup.add(xmlRadioButton);
        xmlRadioButton.setFont(new java.awt.Font("Dialog", 0, 12));
        xmlRadioButton.setSelected(true);
        xmlRadioButton.setText("Xml");
        xmlRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xmlRadioButtonActionPerformed(evt);
            }
        });

        languageButtonGroup.add(javaRadioButton);
        javaRadioButton.setFont(new java.awt.Font("Dialog", 0, 12));
        javaRadioButton.setText("Java");
        javaRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                javaRadioButtonActionPerformed(evt);
            }
        });

        languageButtonGroup.add(customRadioButton);
        customRadioButton.setFont(new java.awt.Font("Dialog", 0, 12));
        customRadioButton.setText("Custom");
        customRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customRadioButtonActionPerformed(evt);
            }
        });

        customPluginComboBox.setFont(new java.awt.Font("Dialog", 0, 12));
        customPluginComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PSS/E Contingency Analysis" }));
        customPluginComboBox.setEnabled(false);

        displayXmlButton.setFont(new java.awt.Font("Dialog", 0, 10));
        displayXmlButton.setText("XML");
        displayXmlButton.setEnabled(false);
        displayXmlButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayXmlButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(textAreaScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(27, 27, 27)
                        .add(xmlRadioButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(javaRadioButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(customRadioButton)
                        .add(32, 32, 32)
                        .add(customPluginComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 248, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(displayXmlButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(xmlRadioButton)
                    .add(javaRadioButton)
                    .add(customRadioButton)
                    .add(customPluginComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(displayXmlButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(textAreaScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 441, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void customRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customRadioButtonActionPerformed
        setCustomPluginStatus(customRadioButton.isSelected());
    }//GEN-LAST:event_customRadioButtonActionPerformed

    private void displayXmlButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayXmlButtonActionPerformed
    	String pluginName = (String)customPluginComboBox.getSelectedItem();
    	String scripts = scriptsTextArea.getText();
		ICustomRunScriptPlugin adapter = PluginSpringCtx.getCustomScriptRunPlugin(pluginName);
		InterPSSXmlType ipssXmlDoc = adapter.createIpssXmlDocument(AnalysisRunDataType.CONTINGENCY_ANALYSIS, scripts);
		IOutputTextDialog dialog = UISpringAppContext.getOutputTextDialog("InterPSS Xml Docuement");
		dialog.display(ipssXmlDoc.toString());		
    }//GEN-LAST:event_displayXmlButtonActionPerformed

    private void javaRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_javaRadioButtonActionPerformed
        setCustomPluginStatus(false);
    }//GEN-LAST:event_javaRadioButtonActionPerformed

    private void xmlRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xmlRadioButtonActionPerformed
        setCustomPluginStatus(false);
    }//GEN-LAST:event_xmlRadioButtonActionPerformed
    
    private void setCustomPluginStatus(boolean b) {
		customPluginComboBox.setEnabled(b);
		displayXmlButton.setEnabled(b);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox customPluginComboBox;
    private javax.swing.JRadioButton customRadioButton;
    private javax.swing.JButton displayXmlButton;
    private javax.swing.JRadioButton javaRadioButton;
    private javax.swing.ButtonGroup languageButtonGroup;
    private javax.swing.JTextArea scriptsTextArea;
    private javax.swing.JScrollPane textAreaScrollPane;
    private javax.swing.JRadioButton xmlRadioButton;
    // End of variables declaration//GEN-END:variables
}
