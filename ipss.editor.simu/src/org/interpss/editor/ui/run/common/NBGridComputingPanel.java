 /*
  * @(#)NBAclfCasePanel.java   
  *
  * Copyright (C) 2006 www.interpss.org
  *
  * This program is free software; you can redistribute it and/or
  * modify it under the terms of the GNU LESSER GENERAL PUBLIC LICENSE
  * as published by the Free Software Foundation; either version 2.1
  * of the License, or (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * @Author Mike Zhou
  * @Version 1.0
  * @Date 09/15/2006
  * 
  *   Revision History
  *   ================
  *
  */

package org.interpss.editor.ui.run.common;

import java.util.Vector;

import org.interpss.editor.jgraph.ui.edit.IFormDataPanel;
import org.interpss.grid.gridgain.util.GridUtil;
import org.interpss.ui.SwingInputVerifyUtil;
import org.interpss.xml.schema.GridComputingXmlType;

import com.interpss.common.util.IpssLogger;

public class NBGridComputingPanel extends javax.swing.JPanel implements IFormDataPanel {
	private static final long serialVersionUID = 1;

    // holds the current case data being edited
    //private BaseDataBean _caseData = null;
    private GridComputingXmlType xmlGridOpt;
	
    /** Creates new form NBAclfCasePanel */
    public NBGridComputingPanel() {
    	initComponents();

        DataVerifier verifier = new DataVerifier();
        this.gridTimeoutTextField.setInputVerifier(verifier);
    }

    public void init(Object netContainer, Object caseData) {
    }
    	

    public void setXmlCaseData(GridComputingXmlType xmlGridOpt) {
    	this.xmlGridOpt = xmlGridOpt;
    }
/*    
    public void setCaseData(BaseDataBean data) {
    	_caseData = data;
    }
*/    
	/**
	*	Set form data to the editor
	*
	* @return false if there is any problem
	*/
	public boolean setForm2Editor() {
		IpssLogger.getLogger().info("NBAclfCasePanel setForm2Editor() called");

	    try {
	    	if (GridUtil.isGridEnabled()) {
		       	 enableGridCheckBox.setEnabled(true);
		       	 enableGridCheckBox.setSelected(false);
	    	}
	    } catch (NoClassDefFoundError e) {
	    	 enableGridCheckBox.setEnabled(false);
	    }
	    enableGridCheckBoxActionPerformed(null);

		return true;
	}
    
	/**
	*	Save editor screen data to the form
	*
	* @param errMsg error messages during the saving process.
	* @return false if there is any problem
	*/
	public boolean saveEditor2Form(Vector<String> errMsg) throws Exception {
		IpssLogger.getLogger().info("NBAclfCasePanel saveEditor2Form() called");

		if (this.xmlGridOpt != null) {
			this.xmlGridOpt.setEnableGridRun(enableGridCheckBox.isEnabled()&&enableGridCheckBox.isSelected());
	        if (this.xmlGridOpt.isEnableGridRun()) {
	        	this.xmlGridOpt.setRemoteNodeName((String)selectGridNodeComboBox.getSelectedItem());
	        	this.xmlGridOpt.setTimeout((long)SwingInputVerifyUtil.getInt(this.gridTimeoutTextField)*1000);
	        }
		}

        return errMsg.size() == 0;
	}
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        gridComputingPanel = new javax.swing.JPanel();
        enableGridCheckBox = new javax.swing.JCheckBox();
        gridTimeoutLabel = new javax.swing.JLabel();
        gridTimeoutTextField = new javax.swing.JTextField();
        selectGridNodeLabel = new javax.swing.JLabel();
        selectGridNodeComboBox = new javax.swing.JComboBox();
        refreashGridButton = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        gridComputingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "InterPSS Grid Computing", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10)));
        gridComputingPanel.setEnabled(false);
        gridComputingPanel.setLayout(new java.awt.GridBagLayout());

        enableGridCheckBox.setFont(new java.awt.Font("Dialog", 0, 12));
        enableGridCheckBox.setText("Enable Grid Computing");
        enableGridCheckBox.setEnabled(false);
        enableGridCheckBox.setName("lfSummaryCheckBox"); // NOI18N
        enableGridCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableGridCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 5, 0);
        gridComputingPanel.add(enableGridCheckBox, gridBagConstraints);

        gridTimeoutLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        gridTimeoutLabel.setText("Timeout(s)");
        gridTimeoutLabel.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        gridComputingPanel.add(gridTimeoutLabel, gridBagConstraints);

        gridTimeoutTextField.setColumns(3);
        gridTimeoutTextField.setFont(new java.awt.Font("Dialog", 0, 10));
        gridTimeoutTextField.setText("60");
        gridTimeoutTextField.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        gridComputingPanel.add(gridTimeoutTextField, gridBagConstraints);

        selectGridNodeLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        selectGridNodeLabel.setText("Select Grid Node");
        selectGridNodeLabel.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 30, 5, 10);
        gridComputingPanel.add(selectGridNodeLabel, gridBagConstraints);

        selectGridNodeComboBox.setFont(new java.awt.Font("Dialog", 0, 12));
        selectGridNodeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Local Node" }));
        selectGridNodeComboBox.setEnabled(false);
        selectGridNodeComboBox.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        gridComputingPanel.add(selectGridNodeComboBox, gridBagConstraints);

        refreashGridButton.setFont(new java.awt.Font("Dialog", 0, 10));
        refreashGridButton.setText("Refresh");
        refreashGridButton.setEnabled(false);
        refreashGridButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreashGridButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 30);
        gridComputingPanel.add(refreashGridButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        add(gridComputingPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

private void refreashGridButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreashGridButtonActionPerformed
	GridUtil.freshDefaultGrid();
	selectGridNodeComboBox.setModel(new javax.swing.DefaultComboBoxModel(GridUtil.getRemoteGridNodeNameList()));
}//GEN-LAST:event_refreashGridButtonActionPerformed

private void enableGridCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableGridCheckBoxActionPerformed
	boolean b = enableGridCheckBox.isEnabled() && enableGridCheckBox.isSelected();
	gridComputingPanel.setEnabled(b);
   	selectGridNodeLabel.setEnabled(b);
   	selectGridNodeComboBox.setEnabled(b);
    gridTimeoutLabel.setEnabled(b);
    gridTimeoutTextField.setEnabled(b);
    refreashGridButton.setEnabled(b);
   	if (b) {
   		selectGridNodeComboBox.setModel(new javax.swing.DefaultComboBoxModel(GridUtil.getRemoteGridNodeNameList()));
   	}
}//GEN-LAST:event_enableGridCheckBoxActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox enableGridCheckBox;
    private javax.swing.JPanel gridComputingPanel;
    private javax.swing.JLabel gridTimeoutLabel;
    private javax.swing.JTextField gridTimeoutTextField;
    private javax.swing.JButton refreashGridButton;
    private javax.swing.JComboBox selectGridNodeComboBox;
    private javax.swing.JLabel selectGridNodeLabel;
    // End of variables declaration//GEN-END:variables
    
	class DataVerifier extends javax.swing.InputVerifier {
		public boolean verify(javax.swing.JComponent input) {
			if (input == null)
				return false;
			try {
       			if (input == gridTimeoutTextField )
   	       			return SwingInputVerifyUtil.getInt((javax.swing.JTextField)input) >= 0;
			} catch (Exception e) {
				return false;
			}		
			return true;
		}
	}
}
