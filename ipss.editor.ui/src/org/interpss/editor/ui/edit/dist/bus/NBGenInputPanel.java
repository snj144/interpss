 /*
  * @(#)NBGenInputPanel.java   
  *
  * Copyright (C) 2006 www.interpss.org
  *
  * This program is free software; you can redistribute it and/or
  * modify it under the terms of the GNU LESSER GENERAL PUBLIC LICENSE
  * as published by the Free Software Foundation; either version 2.1
  * of the License, or (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * @Author Mike Zhou
  * @Version 1.0
  * @Date 09/15/2006
  * 
  *   Revision History
  *   ================
  *
  */

package org.interpss.editor.ui.edit.dist.bus;

import java.util.Vector;

import org.interpss.editor.data.dist.DistBusData;
import org.interpss.editor.form.GBusForm;
import org.interpss.editor.form.GFormContainer;
import org.interpss.editor.jgraph.ui.edit.IFormDataDialog;
import org.interpss.editor.jgraph.ui.edit.IFormDataPanel;
import org.interpss.editor.ui.UISpringAppContext;
import org.interpss.numeric.util.Number2String;
import org.interpss.ui.SwingInputVerifyUtil;

import com.interpss.common.util.IpssLogger;
 
public class NBGenInputPanel extends javax.swing.JPanel  implements IFormDataPanel {
	private static final long serialVersionUID = 1;

	private GFormContainer netContainer = null;
	private GBusForm  form = null;
    private DistBusData  data = null;

	public void initPanel() {
		DataVerifier verifier = new DataVerifier();
    	this.ratedKWField.setInputVerifier(verifier);
    	this.ratedVTextField.setInputVerifier(verifier);
    	this.pfTextField.setInputVerifier(verifier);
    	this.loadingTextField.setInputVerifier(verifier);
	}

	public void init(Object aNetContainer, Object aform) {
		IpssLogger.getLogger().info("NBGenInputPanel init() called");

		this.netContainer = (GFormContainer)aNetContainer;
		this.form = (GBusForm)aform;
		this.data = this.form.getDistBusData();
	}
	
    public boolean setForm2Editor() {
		IpssLogger.getLogger().info("NBGenInputPanel setForm2Editor() called");

		this.ratedKWField.setText(Number2String.toStr(this.data.getBusRating(), "#0.0#"));
		this.ratedKWUnitComboBox.setSelectedItem(this.data.getBusRatingUnit());
        this.ratedVTextField.setText(Number2String.toStr(this.data.getRatedVolt(), "#0.0##"));
        this.ratedVUnitComboBox.setSelectedItem(this.data.getRatedVoltUnit());
    	this.pfTextField.setText(Number2String.toStr(this.data.getPFactor(), "#0.0#"));
		this.pfUnitComboBox.setSelectedItem(this.data.getPFactorUnit());
    	this.loadingTextField.setText(Number2String.toStr(this.data.getLoading(), "#0.0#"));
    	
        includeLScheduleCheckBox.setSelected(data.isHasLoadSchedule());
    	
    	return true;
	}
    
    public boolean saveEditor2Form(Vector errMsg) throws Exception {
		IpssLogger.getLogger().info("NBGenInputPanel saveEditor2Form() called");

		boolean ok = true;

		if (!SwingInputVerifyUtil.largeThan(this.ratedKWField, 0.0d)) {
			errMsg.add("Generator rating <= 0.0");
			ok = false;
		}
    	this.data.setBusRating(SwingInputVerifyUtil.getDouble(this.ratedKWField));
		this.data.setBusRatingUnit((String)this.ratedKWUnitComboBox.getSelectedItem());

		if (!SwingInputVerifyUtil.largeThan(this.ratedVTextField, 0.0d)) {
			errMsg.add("Generator rated voltage <= 0.0");
			ok = false;
		}
    	this.data.setRatedVolt(SwingInputVerifyUtil.getDouble(this.ratedVTextField));
		this.data.setRatedVoltUnit((String)this.ratedVUnitComboBox.getSelectedItem());

		if (this.data.getPFactorUnit().equals("%") && !SwingInputVerifyUtil.within(this.pfTextField, -100.0d, 100.0d) ||
          this.data.getPFactorUnit().equals("PU") && !SwingInputVerifyUtil.within(this.pfTextField, -1.0d, 1.0d) ||
          SwingInputVerifyUtil.getDouble(this.pfTextField) == 0.0) {
			errMsg.add("Generator power factor is out of range or = 0.0");
			ok = false;
		}
    	this.data.setPFactor(SwingInputVerifyUtil.getDouble(this.pfTextField));  // Gen PF may be + or -
		this.data.setPFactorUnit((String)this.pfUnitComboBox.getSelectedItem());
      
		if (!SwingInputVerifyUtil.largeThan(this.loadingTextField, 0.0d) || 
          !SwingInputVerifyUtil.within(this.loadingTextField, 0.0d, 100.0d)) {
			errMsg.add("Generator loading <= 0.0 or > 100%");
			ok = false;
		}
    	this.data.setLoading(SwingInputVerifyUtil.getDouble(this.loadingTextField));  

    	data.setHasLoadSchedule(includeLScheduleCheckBox.isSelected());
    	
    	return ok;
    }

	// The following code is controlled by NetBean IDE
	// ===============================================
    
    /** Creates new form NBUtilityInputPanel */
    public NBGenInputPanel() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        ratedKWLabel = new javax.swing.JLabel();
        ratedKWField = new javax.swing.JTextField();
        ratedKWUnitComboBox = new javax.swing.JComboBox();
        ratedVLabel = new javax.swing.JLabel();
        ratedVTextField = new javax.swing.JTextField();
        ratedVUnitComboBox = new javax.swing.JComboBox();
        pfLabel = new javax.swing.JLabel();
        pfTextField = new javax.swing.JTextField();
        pfUnitComboBox = new javax.swing.JComboBox();
        loadingLabel = new javax.swing.JLabel();
        loadingTextField = new javax.swing.JTextField();
        loadScheduleButton = new javax.swing.JButton();
        includeLScheduleCheckBox = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        ratedKWLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        ratedKWLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        ratedKWLabel.setText("Rated KW");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        add(ratedKWLabel, gridBagConstraints);

        ratedKWField.setColumns(8);
        ratedKWField.setFont(new java.awt.Font("Dialog", 0, 12));
        ratedKWField.setText("0.0");
        ratedKWField.setName("ratedKWTextField");
        add(ratedKWField, new java.awt.GridBagConstraints());

        ratedKWUnitComboBox.setFont(new java.awt.Font("Dialog", 0, 10));
        ratedKWUnitComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Mva", "MW", "Kva", "KW" }));
        ratedKWUnitComboBox.setName("ratedKWUnitComboBox");
        add(ratedKWUnitComboBox, new java.awt.GridBagConstraints());

        ratedVLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        ratedVLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        ratedVLabel.setText("Rated V");
        ratedVLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 5);
        add(ratedVLabel, gridBagConstraints);

        ratedVTextField.setColumns(8);
        ratedVTextField.setFont(new java.awt.Font("Dialog", 0, 12));
        ratedVTextField.setText("1.0");
        ratedVTextField.setName("ratedVTextField");
        add(ratedVTextField, new java.awt.GridBagConstraints());

        ratedVUnitComboBox.setFont(new java.awt.Font("Dialog", 0, 10));
        ratedVUnitComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PU", "Volt", "KV" }));
        ratedVUnitComboBox.setName("ratedVUnitComboBox");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(ratedVUnitComboBox, gridBagConstraints);

        pfLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        pfLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        pfLabel.setText("PFactor");
        pfLabel.setPreferredSize(new java.awt.Dimension(65, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        add(pfLabel, gridBagConstraints);

        pfTextField.setColumns(4);
        pfTextField.setFont(new java.awt.Font("Dialog", 0, 12));
        pfTextField.setText("0.8");
        pfTextField.setName("pfTextField");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        add(pfTextField, gridBagConstraints);

        pfUnitComboBox.setFont(new java.awt.Font("Dialog", 0, 10));
        pfUnitComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PU", "%" }));
        pfUnitComboBox.setName("pfUnitComboBox");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        add(pfUnitComboBox, gridBagConstraints);

        loadingLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        loadingLabel.setText("Loading(%)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 0, 5);
        add(loadingLabel, gridBagConstraints);

        loadingTextField.setColumns(4);
        loadingTextField.setText("100");
        loadingTextField.setName("loadingTextField");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        add(loadingTextField, gridBagConstraints);

        loadScheduleButton.setFont(new java.awt.Font("Dialog", 0, 10));
        loadScheduleButton.setText("Load Schedule ...");
        loadScheduleButton.setEnabled(false);
        loadScheduleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadScheduleButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 5, 0);
        add(loadScheduleButton, gridBagConstraints);

        includeLScheduleCheckBox.setFont(new java.awt.Font("Dialog", 0, 12));
        includeLScheduleCheckBox.setText("Include Load Schedule");
        includeLScheduleCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        includeLScheduleCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        includeLScheduleCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                includeLScheduleCheckBoxItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 5, 0);
        add(includeLScheduleCheckBox, gridBagConstraints);

    }
    // </editor-fold>//GEN-END:initComponents

    private void includeLScheduleCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_includeLScheduleCheckBoxItemStateChanged
    	if (includeLScheduleCheckBox.isSelected()) {
    		loadScheduleButton.setEnabled(true);
    	}
    	else 
    		loadScheduleButton.setEnabled(false);
    }//GEN-LAST:event_includeLScheduleCheckBoxItemStateChanged

    private void loadScheduleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadScheduleButtonActionPerformed
    	IFormDataDialog dialog = UISpringAppContext.getLoadScheduleDialog();
    	dialog.init(netContainer, data);
    }//GEN-LAST:event_loadScheduleButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox includeLScheduleCheckBox;
    private javax.swing.JButton loadScheduleButton;
    private javax.swing.JLabel loadingLabel;
    private javax.swing.JTextField loadingTextField;
    private javax.swing.JLabel pfLabel;
    private javax.swing.JTextField pfTextField;
    private javax.swing.JComboBox pfUnitComboBox;
    private javax.swing.JTextField ratedKWField;
    private javax.swing.JLabel ratedKWLabel;
    private javax.swing.JComboBox ratedKWUnitComboBox;
    private javax.swing.JLabel ratedVLabel;
    private javax.swing.JTextField ratedVTextField;
    private javax.swing.JComboBox ratedVUnitComboBox;
    // End of variables declaration//GEN-END:variables
    
	class DataVerifier extends javax.swing.InputVerifier {
    	public boolean verify(javax.swing.JComponent input) {
			if (input == null)
				return false;
       		try {
       			if (input == ratedKWField || input == ratedVTextField || input == loadingTextField)
 	       			return SwingInputVerifyUtil.getDouble((javax.swing.JTextField)input) > 0.0;
 	       	} catch (Exception e) {
 	    		return false;
 	       	}		
			return true;
        }
    }
}
